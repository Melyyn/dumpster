uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

#define PI  3.14159265359
#define TWO_PI (2.0*PI)
#define HALF_PI (0.5*PI)

float thresh(float base, float val, float blur)
{
    return smoothstep(val+(blur/10.), val-(blur/2.), base);
}

vec4 circle(vec2 uv, vec2 coord, float r, float col)
{
    // returns the crcl in alpha
    float mask = thresh(length(coord - uv), r, .005);
    if (col < 1)
        return vec4(vec3(0), mask);
    else
    {
        float border = thresh(length(coord - uv), r-.005, .005);
        return vec4(vec3(border), mask);
    }
}

void main(void)
{
    vec2 R = resolution.xy, UV = (gl_FragCoord.xy - .5 * R) / R.y;
    vec3 col = vec3(0.);
    int amount = 80; // n of circles
    float maxSize = .2; // size of largest circle
    float speed = 3.; // sml circle
    for(int i=0; i < amount; i++)
    {
        float norm = float(i) / float(amount);
        float size = pow(1. - norm, 3.) * maxSize;
        float t = time - norm * speed;
        vec2 center = vec2(sin(t*4.7213),tan(t/1.12114)) * 0.25;
        vec4 circ = circle(UV, center, size, float(i % 2));
        col = mix(col, circ.xyz, circ.w);
    }
   
    gl_FragColor = vec4(col,1.0);
}
